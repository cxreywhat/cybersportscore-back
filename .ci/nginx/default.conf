map $http_x_forwarded_proto $proto {
  http      $http_x_forwarded_proto;
  https     $http_x_forwarded_proto;
  default   $scheme;
}

map $http_user_agent $crawler {
  ~DMPagent.* "";
  ~*.*(bot|spider|slurp).* $http_user_agent;
  default "";
}

map $http_user_agent $byip {
  ~DMPagent.* "";
  ~*.*(bot|spider|slurp).* "";
  default $binary_remote_addr;
}

map "$request_method:$http_user_agent" $bypost {
  default           "";
  "~^POST:DMPagent" "";
  "~^POST:.*"  $binary_remote_addr;
  "~^PUT:.*"   $binary_remote_addr;
  "~^PATCH:.*" $binary_remote_addr;
}

limit_req_zone $byip zone=common:100m rate=100r/s;
limit_req_zone $crawler zone=crawlers:100m rate=300r/s;
limit_req_zone $bypost zone=limited:100m rate=4r/s;

# limit_req zone=global;
limit_req_status 429;

# real_ip_header CF-Connecting-IP;
real_ip_header X-Forwarded-For;
set_real_ip_from 10.0.0.0/8;

server {
    listen 8081;
    server_name _;

    allow 10.0.0.0/8;
    allow 100.64.0.0/10;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;

    location /metrics {
        content_by_lua_block {
            prometheus:collect()
        }
    }
}

server {
    listen 80;
    server_name _;

	error_log  /dev/stderr;
	access_log /dev/stdout main;

    index index.php;
    root /var/www/app/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    resolver kube-dns.kube-system.svc.cluster.local valid=10s;
    # set $minio_upstream http://minio-public.NAMESPACE_PLACEHOLDER.svc.cluster.local;

    location = /404.html {
        root /var/www/app/public;
        internal;
    }

    location = /media {
        return 404;
    }

    # reverse proxy for media + caching
    location ^~ /media {
        # enable caching
        expires 30m;
        add_header Pragma public;
        add_header Cache-Control 'public';

        ## No need to bleed constant updates. Send the all shebang in one fell swoop.
        tcp_nodelay off;

        proxy_ssl_server_name on;
        proxy_pass_request_headers on;
        proxy_pass_request_body off;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_ignore_headers Cache-Control;
        #proxy_hide_header Content-Type;
        proxy_buffering off;
        access_log        off;
        log_not_found off;

        proxy_intercept_errors on;
        error_page 404 /404.html;

        ## Set the OS file cache.
        # open_file_cache max=3000 inactive=120s;
        # open_file_cache_valid 45s;
        # open_file_cache_min_uses 2;
        # open_file_cache_errors off;
        proxy_pass http://minio-public.gt.svc.cluster.local;
        # proxy_pass $minio_upstream;
    }

    location ~* ^/api {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~* ^/go {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ ^/(sitemap.xml|sitemap) {
        # kill cache
        proxy_no_cache 1;
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;

        proxy_ssl_server_name on;
        proxy_pass http://minio-public.gt-dev.svc.cluster.local/css/$uri$is_args$args;
        proxy_pass_request_headers on;
        proxy_pass_request_body off;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_ignore_headers Cache-Control;
        # proxy_hide_header Content-Type;

        # enable caching
        access_log off;
        log_not_found off;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /404.html;

    location ~ \.php$ {
        # try_files $uri =404;

        limit_req zone=crawlers burst=500;
        limit_req zone=common burst=20;

        include /etc/nginx/conf.d/common.conf;
        include /etc/nginx/conf.d/fastcgi_params.conf;

        # fastcgi_intercept_errors on;

        fastcgi_pass        0.0.0.0:8000;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }

    location / {
        deny all;
    }
}
