user www-data;
worker_processes  4;
worker_rlimit_nofile 131072;

include    /etc/nginx/modules-enabled/*.conf;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  262144;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  server_tokens off;

  log_format  main escape=json
    '{ "remote_addr": "$remote_addr", '
    '"time_local": "$time_local", '
    '"clientip": "$remote_addr", '
    '"remote_user": "$remote_user", '
    '"@timestamp": "$time_iso8601", '
    '"response_time": "$upstream_response_time", '
    '"request_time": "$request_time", '
    '"host": "$http_host", '
    '"hostname": "$http_host", '
    '"proto": "$proto", '
    '"url": "$uri", '
    '"args": "$args", '
    '"request": "$request", '
    '"request_uri": "$request_uri", '
    '"request_method": "$request_method", '
    '"status": $status, '
    '"response": $status, '
    '"body_bytes_sent": "$body_bytes_sent", '
    '"referer": "$http_referer", '
    '"user_agent": "$http_user_agent", '
    '"agent": "$http_user_agent", '
    '"x_forwarded_for": "$http_x_forwarded_for", '
    '"x_forwarded_proto": "$http_x_forwarded_proto", '
    '"cf_connecting_ip": "$http_cf_connecting_ip", '
    '"pipe": "$pipe"'
    '}'
  ;

  real_ip_recursive on;

  reset_timedout_connection on;
  client_body_timeout 15;
  client_header_timeout 15;
  keepalive_timeout 15;
  send_timeout 10;

  client_body_buffer_size 10m;
  connection_pool_size 256;
  client_header_buffer_size 1k;
  large_client_header_buffers 4 8k;
  request_pool_size 4k;
  client_max_body_size 32m;
  server_names_hash_bucket_size 64;

  variables_hash_max_size 2048;
  variables_hash_bucket_size 128;

  gzip on;
  gzip_min_length 1100;
  gzip_buffers 4 8k;
  gzip_types text/plain text/xml application/xml application/x-javascript text/javascript text/css text/json;

  output_buffers 1 32k;
  postpone_output 1460;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  ignore_invalid_headers on;

  map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
  }

  lua_shared_dict prometheus_metrics 10M;
  lua_package_path "/usr/share/nginx/nginx-lua-prometheus/?.lua;";
  init_by_lua '
    prometheus = require("prometheus").init("prometheus_metrics")

    metric_requests = prometheus:counter(
      "nginx_http_requests_total", "Number of HTTP requests", {"hostname", "status"})
    metric_latency = prometheus:histogram(
      "nginx_http_request_duration_seconds", "HTTP request latency", {"hostname"})
  ';

  map $http_x_forwarded_proto $proto {
      http      $http_x_forwarded_proto;
      https     $http_x_forwarded_proto;
      default   $scheme;
  }

  include /etc/nginx/conf.d/*.conf;
}